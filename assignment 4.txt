
#include <windows.h>  
#include <GL/glut.h>
#include<iostream>
#include<math.h>
GLint a, b, c = 0;
GLfloat theta;
GLfloat energy = 0.5;
GLfloat u[10][10][10];
GLfloat k = 384.1;
GLfloat cz = 0.385;
GLfloat row = 8940;
GLfloat alpha = k / (cz * row);

GLfloat points[8][3] = { {0, 0, 0}, {1, 0, 0}, {1, 1, 0}, {0, 1, 0},
{0, 0, 1}, {1, 0, 1}, {1, 1, 1}, {0, 1, 1} };
void quad(GLint n1, GLint n2, GLint n3, GLint n4, GLfloat dx, GLfloat dy, GLfloat dz) {
	glBegin(GL_POLYGON);
	glVertex3f(points[n1][0] * dx, points[n1][1] * dy, points[n1][2] * dz);
	glVertex3f(points[n2][0] * dx, points[n2][1] * dy, points[n2][2] * dz);
	glVertex3f(points[n3][0] * dx, points[n3][1] * dy, points[n3][2] * dz);
	glVertex3f(points[n4][0] * dx, points[n4][1] * dy, points[n4][2] * dz);
	glEnd();
}
void cube(GLfloat dx, GLfloat dy, GLfloat dz) {
	glColor3f(rand() / (double)RAND_MAX, 1, 1); // Random Colours
	quad(0, 1, 2, 3, dx, dy, dz);
	quad(4, 5, 6, 7, dx, dy, dz);
	quad(2, 3, 7, 6, dx, dy, dz);
	quad(0, 1, 5, 4, dx, dy, dz);
	quad(1, 2, 6, 5, dx, dy, dz);
	quad(3, 7, 4, 0, dx, dy, dz);
}

void cubeMesh(GLfloat l, GLfloat r, GLfloat t, GLfloat b, // left, right, top, bottom
	GLfloat n, GLfloat f, // near, far
	GLint nx, GLint ny, GLint nz) // cubes quantities
{
	GLfloat dx = abs(r - l) / (double)nx;
	GLfloat dy = abs(t - b) / (double)ny;
	GLfloat dz = abs(f - n) / (double)nz;
	int ii, jj, kk;
	glTranslatef(l, t, n);
	for (kk = 0; kk < nz; kk++) {
		for (jj = 0; jj < ny; jj++) {
			for (ii = 0; ii < nx; ii++) {
				cube(dx, dy, dz);
				glTranslatef(dx, 0, 0);
				glColor3f(ii, jj, kk);
			}
			glTranslatef(-dx * nx, 0, 0);
			glTranslatef(0, dy, 0);
			glColor3f(ii, jj, kk);
		}
		glTranslatef(0, -dy * ny, 0);
		glTranslatef(0, 0, dz);
		glColor3f(ii, jj, kk);
	}
	glTranslatef(0, 0, -dz * nz);
	glColor3f(ii, jj, kk);
}

void display()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glRotatef(theta++, 1, 0, 0);
	glRotatef(theta++, 0, 1, 0);
	glOrtho(-5., 5., -5, 5., -5., 5.);
	cubeMesh(-2, +2., -2, 2, -2, 2, 10, 10, 10);
	glFlush();
	glutSwapBuffers();
}
void timer(int x)
{

	glRotatef(theta++, 1, 0, 0);
	glRotatef(theta++, 0, 1, 0);
	glColor3f(rand() / (double)RAND_MAX, 1, 1);
		for (int i = 0; i < 10; i++)
		{
			for (int j = 0; j < 10; j++)
			{
				for (int k = 0; k < 10; k++)
				{
					glRotatef(theta++, 1, 0, 0);
					glRotatef(theta++, 0, 1, 0);
					if (i = 0, j = 0, k = 0)
					{
						u[i][j][k] = points[8][3] + alpha * (u[i + 2][j][k] - 2 * u[i + 1][j][k] + u[i][j][k] +
							u[i][j + 2][k] - 2 * u[i][j][k] + u[i][j][k] +
							u[i][j][k + 2] - 2 * u[i][j][k + 1] + u[i][j][k]);

					}
					if (i = 1, j = 0, k = 0)
					{
						u[i][j][k] = points[8][3] + alpha * (u[i][j][k] - 2 * u[i - 1][j][k] + u[i - 2][j][k] +
							u[i][j + 2][k] - 2 * u[i][j + 1][k] + u[i][j][k] +
							u[i][j][k + 2] - 2 * u[i][j][k + 1] + u[i][j][k]);

					}
					if (i = 0, j = 1, k = 0)
					{
						u[i][j][k] = points[8][3] + alpha * (u[i + 2][j][k] - 2 * u[i + 1][j][k] + u[i][j][k] +
							u[i][j][k] - 2 * u[i][j - 1][k] + u[i][j - 2][k] +
							u[i][j][k + 2] - 2 * u[i][j][k + 1] + u[i][j][k]);

					}
					if (i = 0, j = 0, k = 1)
					{
						u[i][j][k] = points[8][3] + alpha * (u[i + 2][j][k] - 2 * u[i + 1][j][k] + u[i][j][k] +
							u[i][j + 2][k] - 2 * u[i][j + 1][k] + u[i][j][k] +
							u[i][j][k] - 2 * u[i][j][k - 1] + u[i][j][k - 2]);

					}
					if (i = 1, j = 1, k = 0)
					{
						u[i][j][k] = points[8][3] + alpha * (u[i][j][k] - 2 * u[i - 1][j][k] + u[i - 2][j][k] +
							u[i][j][k] - 2 * u[i][j - 1][k] + u[i][j - 2][k] +
							u[i][j][k + 1] - 2 * u[i][j][k + 1] + u[i][j][k]);

					}
					if (i = 1, j = 1, k = 1)
					{
						u[i][j][k] = points[8][3] + alpha * (u[i][j][k] - 2 * u[i - 1][j][k] + u[i - 2][j][k] +
							u[i][j][k] - 2 * u[i][j - 1][k] + u[i][j - 2][k] +
							u[i][j][k] - 2 * u[i][j][k - 1] + u[i][j][k - 2]);

					}
					if (i = 0, j = 1, k = 1)
					{
						u[i][j][k] = points[8][3] + alpha * (u[i][j][k] - 2 * u[i + 1][j][k] + u[i - 2][j][k] +
							u[i][j][k] - 2 * u[i][j - 1][k] + u[i][j - 2][k] +
							u[i][j][k] - 2 * u[i][j][k - 1] + u[i][j][k - 2]);

					}
					if (i = 1, j = 0, k = 1)
					{
						u[i][j][k] = points[8][3] + alpha * (u[i][j][k] - 2 * u[i - 1][j][k] + u[i - 2][j][k] +
							u[i][j][k] - 2 * u[i][j + 1][k] + u[i][j + 2][k] +
							u[i][j][k] - 2 * u[i][j][k - 1] + u[i][j][k - 2]);
					}

				}
				b++;
				c = 0;
			}
			a++;
			b = 0;
			c = 0;
		}


	glutPostRedisplay();
	glutTimerFunc(1000 / 25., timer, 0);
}
int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutCreateWindow("OpenGL Setup Test");
	glutInitWindowSize(320, 320);
	glutInitWindowPosition(50, 50);
	glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	glutDisplayFunc(display);
	//glutTimerFunc(1000 / 25., timer, 0);
	glutMainLoop();
}